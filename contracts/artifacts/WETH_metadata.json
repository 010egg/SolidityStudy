{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Deposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Withdrawal",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approveSpender",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "deposit",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"details": "This contract allows users to wrap ETH into an ERC20 compatible token and unwrap it back to ETH.      It also includes functionality to authorize external accounts to spend the contract's tokens.",
			"kind": "dev",
			"methods": {
				"allowance(address,address)": {
					"details": "Returns the remaining number of tokens that `spender` is allowed to spend on behalf of `owner`.",
					"params": {
						"owner_": "The address which owns the funds.",
						"spender": "The address which will spend the funds."
					}
				},
				"approve(address,uint256)": {
					"details": "Approves `spender` to spend `amount` on behalf of the caller. Emits an {Approval} event.",
					"params": {
						"amount": "The number of tokens to be spent.",
						"spender": "The address which will spend the funds."
					}
				},
				"approveSpender(address,uint256)": {
					"details": "Allows the contract owner to approve a spender to spend the contract's tokens.",
					"params": {
						"amount": "The number of tokens to approve.",
						"spender": "The address which will spend the tokens."
					},
					"returns": {
						"success": "A boolean indicating if the operation succeeded."
					}
				},
				"balanceOf(address)": {
					"details": "Returns the WETH balance of a specific address.",
					"params": {
						"account": "The address to query the balance of."
					}
				},
				"constructor": {
					"details": "Sets the deployer as the initial owner."
				},
				"deposit()": {
					"details": "Allows users to deposit ETH and mint WETH tokens. The contract must be able to receive ETH, so this function is payable. Emits a {Deposit} and {Transfer} event."
				},
				"totalSupply()": {
					"details": "Returns the total supply of WETH tokens."
				},
				"transfer(address,uint256)": {
					"details": "Transfers `amount` tokens from the caller's account to `recipient`. Emits a {Transfer} event.",
					"params": {
						"amount": "The number of tokens to transfer.",
						"recipient": "The address to transfer to."
					}
				},
				"transferFrom(address,address,uint256)": {
					"details": "Transfers `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Emits a {Transfer} and possibly an {Approval} event.",
					"params": {
						"amount": "The number of tokens to transfer.",
						"recipient": "The address to transfer to.",
						"sender": "The address to transfer from."
					}
				},
				"withdraw(uint256)": {
					"details": "Allows users to withdraw their WETH tokens and receive ETH. Emits a {Withdrawal} and {Transfer} event.",
					"params": {
						"amount": "The number of WETH tokens to withdraw."
					}
				}
			},
			"title": "WETH - Wrapped ETH ERC20 Token with Ownership",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/WETHM.sol": "WETH"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/WETHM.sol": {
			"keccak256": "0xe03a3ffc39419f2601a0e658933574067f72e25fcaf3ad5d6fa6826bb09326e4",
			"license": "MIT",
			"urls": [
				"bzz-raw://2dc09d9982d54ba3ef070784e2a15d4b061f724f9b383b4b068f600a18e49192",
				"dweb:/ipfs/QmX6NZ2u59wjPFb4ozt6sTmXuQStxj74V4Cegp7qiJc2aK"
			]
		}
	},
	"version": 1
}